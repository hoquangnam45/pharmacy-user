// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v4.22.2
// source: user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserCreateUserInfo = "/user.v1.User/CreateUserInfo"
const OperationUserFetchUserInfo = "/user.v1.User/FetchUserInfo"
const OperationUserRemoveUserInfo = "/user.v1.User/RemoveUserInfo"
const OperationUserUpdateUserInfo = "/user.v1.User/UpdateUserInfo"

type UserHTTPServer interface {
	CreateUserInfo(context.Context, *UserInfo) (*UserInfo, error)
	FetchUserInfo(context.Context, *UserInfo) (*UserInfo, error)
	RemoveUserInfo(context.Context, *UserInfo) (*UserInfo, error)
	UpdateUserInfo(context.Context, *UserInfoUpdateRequest) (*UserInfo, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/user", _User_FetchUserInfo0_HTTP_Handler(srv))
	r.DELETE("/user", _User_RemoveUserInfo0_HTTP_Handler(srv))
	r.POST("/user", _User_CreateUserInfo0_HTTP_Handler(srv))
	r.PUT("/user/{id}", _User_UpdateUserInfo0_HTTP_Handler(srv))
}

func _User_FetchUserInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfo
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFetchUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FetchUserInfo(ctx, req.(*UserInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_RemoveUserInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfo
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoveUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveUserInfo(ctx, req.(*UserInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_CreateUserInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserInfo(ctx, req.(*UserInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateUserInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoUpdateRequest
		if err := ctx.Bind(&in.UserInfo); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserInfo(ctx, req.(*UserInfoUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	CreateUserInfo(ctx context.Context, req *UserInfo, opts ...http.CallOption) (rsp *UserInfo, err error)
	FetchUserInfo(ctx context.Context, req *UserInfo, opts ...http.CallOption) (rsp *UserInfo, err error)
	RemoveUserInfo(ctx context.Context, req *UserInfo, opts ...http.CallOption) (rsp *UserInfo, err error)
	UpdateUserInfo(ctx context.Context, req *UserInfoUpdateRequest, opts ...http.CallOption) (rsp *UserInfo, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CreateUserInfo(ctx context.Context, in *UserInfo, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) FetchUserInfo(ctx context.Context, in *UserInfo, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserFetchUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) RemoveUserInfo(ctx context.Context, in *UserInfo, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserRemoveUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateUserInfo(ctx context.Context, in *UserInfoUpdateRequest, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.UserInfo, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationHealthCheckHealthCheck = "/user.v1.HealthCheck/HealthCheck"

type HealthCheckHTTPServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*structpb.Struct, error)
}

func RegisterHealthCheckHTTPServer(s *http.Server, srv HealthCheckHTTPServer) {
	r := s.Route("/")
	r.GET("/user/healthcheck", _HealthCheck_HealthCheck0_HTTP_Handler(srv))
}

func _HealthCheck_HealthCheck0_HTTP_Handler(srv HealthCheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthCheckHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*structpb.Struct)
		return ctx.Result(200, reply)
	}
}

type HealthCheckHTTPClient interface {
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *structpb.Struct, err error)
}

type HealthCheckHTTPClientImpl struct {
	cc *http.Client
}

func NewHealthCheckHTTPClient(client *http.Client) HealthCheckHTTPClient {
	return &HealthCheckHTTPClientImpl{client}
}

func (c *HealthCheckHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*structpb.Struct, error) {
	var out structpb.Struct
	pattern := "/user/healthcheck"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthCheckHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
