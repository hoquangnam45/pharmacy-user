// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/hoquangnam45/pharmacy-auth/internal/biz"
	"github.com/hoquangnam45/pharmacy-auth/internal/conf"
	"github.com/hoquangnam45/pharmacy-auth/internal/data"
	"github.com/hoquangnam45/pharmacy-auth/internal/server"
	"github.com/hoquangnam45/pharmacy-auth/internal/service"
	"github.com/hoquangnam45/pharmacy-common-go/util/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confService *conf.Service, logger log.Logger) (*kratos.App, func(), error) {
	userInfoClient := biz.NewUserInfoClientMock()
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	loginDetailRepo := data.NewLoginDetailRepo(dataData, logger)
	clientRepo := data.NewClientRepo(dataData, logger)
	refreshTokenRepo := data.NewRefreshTokenRepo(dataData, logger)
	transactionManager := data.NewTransactionManager(dataData, logger)
	loginDetailUsecase := biz.NewLoginDetailUseCase(userInfoClient, loginDetailRepo, clientRepo, refreshTokenRepo, logger, transactionManager)
	auth := service.NewAuthService(loginDetailUsecase)
	healthCheckService := service.NewHealthCheckService()
	grpcServer := server.NewGRPCServer(confServer, auth, healthCheckService, logger)
	httpServer := server.NewHTTPServer(confServer, auth, healthCheckService, logger)
	app := newApp(logger, grpcServer, httpServer, confServer, confService)
	return app, func() {
		cleanup()
	}, nil
}
